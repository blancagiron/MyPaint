/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package p4;

import java.awt.Color;
import java.io.File;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import SM.BGR.IU.Lienzo2D;
import SM.BGR.graficos.Figuras;
import SM.BGR.imagenes.BlueOp;
import SM.BGR.imagenes.CambiarColorOp;
import SM.BGR.imagenes.PosterizarOp;
import SM.BGR.imagenes.RedOp;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author Blanca Girón Ricoy Grupo: A3
 */
public class ventana_principal extends javax.swing.JFrame {

    private Cursor cursor = this.getCursor();
    private BufferedImage imgFuente = null;
    //Variables para los colores
    private Color colorC1 = Color.RED;
    private Color colorC2 = Color.GREEN;
    private SMClipPlayer player = null;
    private boolean reproduciendo = false;
    private boolean pausado = false;
    private SMSoundRecorder recorder = null;
    private boolean modo_texto = false;

    private long pos_pausa = 0;

    /**
     * Crea una nueva instancia de la ventana principal.
     */
    public ventana_principal() {
        initComponents();
        this.setSize(1000, 700);
    }

    /**
     * Obtiene el lienzo seleccionado de la ventana interna actualmente activa.
     *
     * @return El lienzo seleccionado de la ventana interna activa, o null si no
     * hay ninguna ventana interna seleccionada.
     */
    private Lienzo2D getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo() : null;
    }

    /**
     * Extrae una banda específica de una imagen dada y devuelve una nueva
     * imagen en escala de grises correspondiente a esa banda.
     *
     * @param img La imagen original de la cual se extraerá la banda.
     * @param banda El índice de la banda que se desea extraer (por ejemplo, 0
     * para la banda roja en una imagen RGB).
     * @return Una nueva imagen en escala de grises que contiene solo la banda
     * especificada de la imagen original.
     */
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                Transparency.OPAQUE,
                DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0,
                img.getWidth(), img.getHeight(), 0, 0, vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    private BufferedImage copiarImagen(BufferedImage img) {
        ColorModel cm = img.getColorModel();
        WritableRaster raster = img.copyData(null);
        boolean alfaPre = img.isAlphaPremultiplied();
        BufferedImage imgCopia = new BufferedImage(cm, raster, alfaPre, null);
        return imgCopia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        Barra_herramientas = new javax.swing.JToolBar();
        BotonLinea = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        BotonElipse = new javax.swing.JToggleButton();
        BotonFantasma = new javax.swing.JToggleButton();
        BotonPentagono = new javax.swing.JToggleButton();
        BotonArco = new javax.swing.JToggleButton();
        BotonCubicCurve = new javax.swing.JToggleButton();
        botonTexto = new javax.swing.JToggleButton();
        BotonTrazoLibre = new javax.swing.JToggleButton();
        BotonMover = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        SeleccionColor = new javax.swing.JButton();
        BotonRelleno = new javax.swing.JToggleButton();
        BotonTransparencia = new javax.swing.JToggleButton();
        BotonAlisar = new javax.swing.JToggleButton();
        Grosor = new javax.swing.JSlider();
        botonVolcado = new javax.swing.JToggleButton();
        Panel_Barra_Estado = new javax.swing.JPanel();
        BarraEstado = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        botonPausa = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        botonGrabar = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        jPanel9 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        etiqueta1 = new javax.swing.JLabel();
        brillo = new javax.swing.JSlider();
        etiqueta2 = new javax.swing.JLabel();
        contraste = new javax.swing.JSlider();
        jComboBox1 = new javax.swing.JComboBox<>();
        etiqueta3 = new javax.swing.JLabel();
        cometa = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        botonContrasteNormal = new javax.swing.JButton();
        botonContrasteOscurecido = new javax.swing.JButton();
        botonContrasteIluminado = new javax.swing.JButton();
        botonEscalarDisminuir = new javax.swing.JButton();
        botonEscalarAumentar = new javax.swing.JButton();
        botonRotacion = new javax.swing.JButton();
        oscurecerClaros = new javax.swing.JToggleButton();
        transformacionLineal = new javax.swing.JSlider();
        etiqueta6 = new javax.swing.JLabel();
        sliderRotacion = new javax.swing.JSlider();
        botonNegativo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        showBandas = new javax.swing.JToggleButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        combinarBandas = new javax.swing.JToggleButton();
        etiqueta7 = new javax.swing.JLabel();
        sliderTintado = new javax.swing.JSlider();
        sepia = new javax.swing.JButton();
        ecualizar = new javax.swing.JButton();
        potenciarAzul = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        etiqueta4 = new javax.swing.JLabel();
        sliderPosterizar = new javax.swing.JSlider();
        etiqueta5 = new javax.swing.JLabel();
        sliderRojo = new javax.swing.JSlider();
        jPanel6 = new javax.swing.JPanel();
        cambiarColor1 = new javax.swing.JButton();
        sliderCambiarColor = new javax.swing.JSlider();
        cambiarColor2 = new javax.swing.JButton();
        Barra_Menu = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        boton_nuevo = new javax.swing.JMenuItem();
        boton_duplicar = new javax.swing.JMenuItem();
        boton_abrir = new javax.swing.JMenuItem();
        boton_guardar = new javax.swing.JMenuItem();
        Imagen = new javax.swing.JMenu();
        menuAffineTransformOpActionPerformed = new javax.swing.JMenuItem();
        menuLookupOP = new javax.swing.JMenuItem();
        menu_rescale = new javax.swing.JMenuItem();
        menu_convolve = new javax.swing.JMenuItem();
        BandCombineOp = new javax.swing.JMenuItem();
        colorConvertOP = new javax.swing.JMenuItem();
        PosterizarOP = new javax.swing.JMenuItem();
        menu_ayuda = new javax.swing.JMenu();
        boton_acercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Barra_herramientas.setRollover(true);

        buttonGroup1.add(BotonLinea);
        BotonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        BotonLinea.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLineaActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonLinea);

        buttonGroup1.add(jToggleButton2);
        jToggleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        jToggleButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        jToggleButton2.setFocusable(false);
        jToggleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        Barra_herramientas.add(jToggleButton2);

        buttonGroup1.add(BotonElipse);
        BotonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        BotonElipse.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonElipse.setFocusable(false);
        BotonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonElipseActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonElipse);

        buttonGroup1.add(BotonFantasma);
        BotonFantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fantasma.png"))); // NOI18N
        BotonFantasma.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonFantasma.setFocusable(false);
        BotonFantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonFantasma.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonFantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonFantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonFantasmaActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonFantasma);

        buttonGroup1.add(BotonPentagono);
        BotonPentagono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pentagono (1).png"))); // NOI18N
        BotonPentagono.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonPentagono.setFocusable(false);
        BotonPentagono.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonPentagono.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonPentagono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPentagonoActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonPentagono);

        buttonGroup1.add(BotonArco);
        BotonArco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/arco (1).png"))); // NOI18N
        BotonArco.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonArco.setFocusable(false);
        BotonArco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonArco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonArco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonArcoActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonArco);

        buttonGroup1.add(BotonCubicCurve);
        BotonCubicCurve.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cubiccurve (1).png"))); // NOI18N
        BotonCubicCurve.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonCubicCurve.setFocusable(false);
        BotonCubicCurve.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCubicCurve.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCubicCurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCubicCurveActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonCubicCurve);

        buttonGroup1.add(botonTexto);
        botonTexto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/addText (1).png"))); // NOI18N
        botonTexto.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        botonTexto.setFocusable(false);
        botonTexto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTexto.setPreferredSize(new java.awt.Dimension(34, 32));
        botonTexto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTextoActionPerformed(evt);
            }
        });
        Barra_herramientas.add(botonTexto);

        buttonGroup1.add(BotonTrazoLibre);
        BotonTrazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazo_libre.png"))); // NOI18N
        BotonTrazoLibre.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        BotonTrazoLibre.setFocusable(false);
        BotonTrazoLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonTrazoLibre.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonTrazoLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonTrazoLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonTrazoLibreActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonTrazoLibre);

        buttonGroup1.add(BotonMover);
        BotonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        BotonMover.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        BotonMover.setFocusable(false);
        BotonMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonMover.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMoverActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonMover);

        jPanel3.setMaximumSize(new java.awt.Dimension(34, 32));
        jPanel3.setMinimumSize(new java.awt.Dimension(30, 30));
        jPanel3.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        SeleccionColor.setBackground(new java.awt.Color(255, 255, 255));
        SeleccionColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionColorActionPerformed(evt);
            }
        });
        jPanel3.add(SeleccionColor);

        Barra_herramientas.add(jPanel3);

        BotonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        BotonRelleno.setFocusable(false);
        BotonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonRelleno.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRellenoActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonRelleno);

        BotonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        BotonTransparencia.setFocusable(false);
        BotonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonTransparencia.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonTransparenciaActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonTransparencia);

        BotonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        BotonAlisar.setFocusable(false);
        BotonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonAlisar.setMaximumSize(new java.awt.Dimension(34, 32));
        BotonAlisar.setMinimumSize(new java.awt.Dimension(34, 32));
        BotonAlisar.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAlisarActionPerformed(evt);
            }
        });
        Barra_herramientas.add(BotonAlisar);

        Grosor.setMaximum(50);
        Grosor.setValue(5);
        Grosor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Grosor.setMaximumSize(new java.awt.Dimension(100, 20));
        Grosor.setPreferredSize(new java.awt.Dimension(100, 20));
        Grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GrosorStateChanged(evt);
            }
        });
        Barra_herramientas.add(Grosor);

        botonVolcado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/volcado.png"))); // NOI18N
        botonVolcado.setFocusable(false);
        botonVolcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonVolcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonVolcado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolcadoActionPerformed(evt);
            }
        });
        Barra_herramientas.add(botonVolcado);

        getContentPane().add(Barra_herramientas, java.awt.BorderLayout.PAGE_START);

        Panel_Barra_Estado.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Panel_Barra_Estado.setLayout(new javax.swing.BoxLayout(Panel_Barra_Estado, javax.swing.BoxLayout.LINE_AXIS));

        BarraEstado.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BarraEstado.setText("Barra de estado");
        Panel_Barra_Estado.add(BarraEstado);

        getContentPane().add(Panel_Barra_Estado, java.awt.BorderLayout.PAGE_END);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setMaximumSize(new java.awt.Dimension(32767, 45));
        jPanel8.setMinimumSize(new java.awt.Dimension(38, 45));
        jPanel8.setPreferredSize(new java.awt.Dimension(7808, 45));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play.png"))); // NOI18N
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setMaximumSize(new java.awt.Dimension(34, 32));
        botonPlay.setMinimumSize(new java.awt.Dimension(34, 32));
        botonPlay.setPreferredSize(new java.awt.Dimension(34, 32));
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        jToolBar2.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop.png"))); // NOI18N
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setMaximumSize(new java.awt.Dimension(34, 32));
        botonStop.setMinimumSize(new java.awt.Dimension(34, 32));
        botonStop.setPreferredSize(new java.awt.Dimension(34, 32));
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        jToolBar2.add(botonStop);

        botonPausa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pausa.png"))); // NOI18N
        botonPausa.setFocusable(false);
        botonPausa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPausa.setMaximumSize(new java.awt.Dimension(34, 32));
        botonPausa.setMinimumSize(new java.awt.Dimension(34, 32));
        botonPausa.setPreferredSize(new java.awt.Dimension(34, 32));
        botonPausa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPausaActionPerformed(evt);
            }
        });
        jToolBar2.add(botonPausa);

        listaReproduccion.setMaximumSize(new java.awt.Dimension(500, 34));
        listaReproduccion.setMinimumSize(new java.awt.Dimension(500, 34));
        listaReproduccion.setPreferredSize(new java.awt.Dimension(500, 34));
        listaReproduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReproduccionActionPerformed(evt);
            }
        });
        jToolBar2.add(listaReproduccion);

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record.png"))); // NOI18N
        botonGrabar.setToolTipText("");
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setMaximumSize(new java.awt.Dimension(34, 32));
        botonGrabar.setMinimumSize(new java.awt.Dimension(34, 32));
        botonGrabar.setPreferredSize(new java.awt.Dimension(34, 32));
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        jToolBar2.add(botonGrabar);

        jPanel8.add(jToolBar2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        escritorio.setBackground(new java.awt.Color(153, 153, 153));
        escritorio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 7808, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );

        jPanel7.add(escritorio, java.awt.BorderLayout.CENTER);

        jPanel9.setPreferredSize(new java.awt.Dimension(173, 50));
        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        jToolBar1.setRollover(true);

        etiqueta1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brillo.png"))); // NOI18N
        etiqueta1.setAlignmentX(0.5F);
        jToolBar1.add(etiqueta1);

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setValue(0);
        brillo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        brillo.setMaximumSize(new java.awt.Dimension(110, 20));
        brillo.setMinimumSize(new java.awt.Dimension(110, 20));
        brillo.setPreferredSize(new java.awt.Dimension(110, 20));
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });
        jToolBar1.add(brillo);

        etiqueta2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        jToolBar1.add(etiqueta2);

        contraste.setMaximum(10);
        contraste.setMinimum(1);
        contraste.setValue(1);
        contraste.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        contraste.setMaximumSize(new java.awt.Dimension(90, 20));
        contraste.setMinimumSize(new java.awt.Dimension(90, 20));
        contraste.setPreferredSize(new java.awt.Dimension(90, 20));
        contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteStateChanged(evt);
            }
        });
        contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteFocusLost(evt);
            }
        });
        jToolBar1.add(contraste);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emborronamiento media", "Emborronamiento binomial", "Enfoque", "Relieve", "Detector de fronteras laplaciano", "Emborronamiento iluminado 5x5", "Emborronamiento iluminado ", "Emborronamiento 5x5", "Emborronamiento 7x7" }));
        jComboBox1.setMaximumSize(new java.awt.Dimension(200, 24));
        jComboBox1.setMinimumSize(new java.awt.Dimension(200, 24));
        jComboBox1.setPreferredSize(new java.awt.Dimension(200, 24));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jComboBox1);

        etiqueta3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cometa.png"))); // NOI18N
        jToolBar1.add(etiqueta3);

        cometa.setMinimum(1);
        cometa.setValue(1);
        cometa.setMaximumSize(new java.awt.Dimension(110, 20));
        cometa.setMinimumSize(new java.awt.Dimension(110, 20));
        cometa.setPreferredSize(new java.awt.Dimension(110, 20));
        cometa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cometaStateChanged(evt);
            }
        });
        cometa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cometaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cometaFocusLost(evt);
            }
        });
        jToolBar1.add(cometa);

        jPanel1.setMaximumSize(new java.awt.Dimension(550, 40));
        jPanel1.setMinimumSize(new java.awt.Dimension(550, 40));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(550, 40));
        jPanel1.setVerifyInputWhenFocusTarget(false);

        botonContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste1.png"))); // NOI18N
        botonContrasteNormal.setPreferredSize(new java.awt.Dimension(34, 32));
        botonContrasteNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteNormalActionPerformed(evt);
            }
        });
        jPanel1.add(botonContrasteNormal);

        botonContrasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ocurecer.png"))); // NOI18N
        botonContrasteOscurecido.setPreferredSize(new java.awt.Dimension(34, 32));
        botonContrasteOscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteOscurecidoActionPerformed(evt);
            }
        });
        jPanel1.add(botonContrasteOscurecido);

        botonContrasteIluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonContrasteIluminado.setPreferredSize(new java.awt.Dimension(34, 32));
        botonContrasteIluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteIluminadoActionPerformed(evt);
            }
        });
        jPanel1.add(botonContrasteIluminado);

        botonEscalarDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/menos.png"))); // NOI18N
        botonEscalarDisminuir.setPreferredSize(new java.awt.Dimension(34, 32));
        botonEscalarDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscalarDisminuirActionPerformed(evt);
            }
        });
        jPanel1.add(botonEscalarDisminuir);

        botonEscalarAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/mas.png"))); // NOI18N
        botonEscalarAumentar.setPreferredSize(new java.awt.Dimension(34, 32));
        botonEscalarAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscalarAumentarActionPerformed(evt);
            }
        });
        jPanel1.add(botonEscalarAumentar);

        botonRotacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotar180.png"))); // NOI18N
        botonRotacion.setPreferredSize(new java.awt.Dimension(34, 32));
        botonRotacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRotacionActionPerformed(evt);
            }
        });
        jPanel1.add(botonRotacion);

        oscurecerClaros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador1.png"))); // NOI18N
        oscurecerClaros.setMaximumSize(new java.awt.Dimension(34, 32));
        oscurecerClaros.setMinimumSize(new java.awt.Dimension(34, 32));
        oscurecerClaros.setPreferredSize(new java.awt.Dimension(34, 32));
        oscurecerClaros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerClarosActionPerformed(evt);
            }
        });
        jPanel1.add(oscurecerClaros);

        transformacionLineal.setMaximum(255);
        transformacionLineal.setValue(0);
        transformacionLineal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        transformacionLineal.setMaximumSize(new java.awt.Dimension(80, 20));
        transformacionLineal.setMinimumSize(new java.awt.Dimension(80, 20));
        transformacionLineal.setPreferredSize(new java.awt.Dimension(80, 20));
        transformacionLineal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transformacionLinealStateChanged(evt);
            }
        });
        transformacionLineal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transformacionLinealFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transformacionLinealFocusLost(evt);
            }
        });
        jPanel1.add(transformacionLineal);

        etiqueta6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador2.png"))); // NOI18N
        jPanel1.add(etiqueta6);

        sliderRotacion.setMaximum(360);
        sliderRotacion.setMinorTickSpacing(90);
        sliderRotacion.setValue(0);
        sliderRotacion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderRotacion.setMaximumSize(new java.awt.Dimension(110, 20));
        sliderRotacion.setMinimumSize(new java.awt.Dimension(110, 20));
        sliderRotacion.setPreferredSize(new java.awt.Dimension(110, 20));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        jPanel1.add(sliderRotacion);

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negativo (1).png"))); // NOI18N
        botonNegativo.setPreferredSize(new java.awt.Dimension(34, 32));
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        jPanel1.add(botonNegativo);

        jToolBar1.add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(130, 40));
        jPanel2.setMinimumSize(new java.awt.Dimension(130, 40));
        jPanel2.setPreferredSize(new java.awt.Dimension(150, 40));

        showBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        showBandas.setMaximumSize(new java.awt.Dimension(34, 32));
        showBandas.setMinimumSize(new java.awt.Dimension(34, 32));
        showBandas.setPreferredSize(new java.awt.Dimension(34, 32));
        showBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBandasActionPerformed(evt);
            }
        });
        jPanel2.add(showBandas);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox2);

        jToolBar1.add(jPanel2);

        jPanel4.setMaximumSize(new java.awt.Dimension(310, 40));
        jPanel4.setMinimumSize(new java.awt.Dimension(310, 40));
        jPanel4.setPreferredSize(new java.awt.Dimension(310, 40));

        combinarBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        combinarBandas.setMaximumSize(new java.awt.Dimension(34, 32));
        combinarBandas.setMinimumSize(new java.awt.Dimension(34, 32));
        combinarBandas.setPreferredSize(new java.awt.Dimension(34, 32));
        combinarBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinarBandasActionPerformed(evt);
            }
        });
        jPanel4.add(combinarBandas);

        etiqueta7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        jPanel4.add(etiqueta7);

        sliderTintado.setMaximum(10);
        sliderTintado.setValue(0);
        sliderTintado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderTintado.setMaximumSize(new java.awt.Dimension(110, 20));
        sliderTintado.setMinimumSize(new java.awt.Dimension(110, 20));
        sliderTintado.setPreferredSize(new java.awt.Dimension(110, 20));
        sliderTintado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTintadoStateChanged(evt);
            }
        });
        sliderTintado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderTintadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderTintadoFocusLost(evt);
            }
        });
        jPanel4.add(sliderTintado);

        sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepia.setPreferredSize(new java.awt.Dimension(34, 32));
        sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaActionPerformed(evt);
            }
        });
        jPanel4.add(sepia);

        ecualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        ecualizar.setPreferredSize(new java.awt.Dimension(34, 32));
        ecualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizarActionPerformed(evt);
            }
        });
        jPanel4.add(ecualizar);

        potenciarAzul.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/azul.png"))); // NOI18N
        potenciarAzul.setPreferredSize(new java.awt.Dimension(34, 32));
        potenciarAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potenciarAzulActionPerformed(evt);
            }
        });
        jPanel4.add(potenciarAzul);

        jToolBar1.add(jPanel4);

        jPanel5.setMaximumSize(new java.awt.Dimension(220, 40));
        jPanel5.setMinimumSize(new java.awt.Dimension(220, 40));
        jPanel5.setName(""); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(235, 40));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        etiqueta4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/posterizar.png"))); // NOI18N
        jPanel5.add(etiqueta4);

        sliderPosterizar.setMaximum(20);
        sliderPosterizar.setMinimum(2);
        sliderPosterizar.setValue(3);
        sliderPosterizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderPosterizar.setMaximumSize(new java.awt.Dimension(110, 20));
        sliderPosterizar.setMinimumSize(new java.awt.Dimension(110, 20));
        sliderPosterizar.setPreferredSize(new java.awt.Dimension(110, 20));
        sliderPosterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosterizarStateChanged(evt);
            }
        });
        sliderPosterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusLost(evt);
            }
        });
        jPanel5.add(sliderPosterizar);

        etiqueta5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        jPanel5.add(etiqueta5);

        sliderRojo.setMaximum(128);
        sliderRojo.setMinimum(1);
        sliderRojo.setValue(1);
        sliderRojo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderRojo.setMaximumSize(new java.awt.Dimension(70, 20));
        sliderRojo.setMinimumSize(new java.awt.Dimension(70, 20));
        sliderRojo.setPreferredSize(new java.awt.Dimension(70, 20));
        sliderRojo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRojoStateChanged(evt);
            }
        });
        sliderRojo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRojoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRojoFocusLost(evt);
            }
        });
        jPanel5.add(sliderRojo);

        jToolBar1.add(jPanel5);

        jPanel6.setMaximumSize(new java.awt.Dimension(235, 40));
        jPanel6.setMinimumSize(new java.awt.Dimension(235, 40));
        jPanel6.setPreferredSize(new java.awt.Dimension(235, 40));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        cambiarColor1.setBackground(new java.awt.Color(255, 255, 255));
        cambiarColor1.setMaximumSize(new java.awt.Dimension(15, 15));
        cambiarColor1.setMinimumSize(new java.awt.Dimension(15, 15));
        cambiarColor1.setPreferredSize(new java.awt.Dimension(15, 15));
        cambiarColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarColor1ActionPerformed(evt);
            }
        });
        jPanel6.add(cambiarColor1);

        sliderCambiarColor.setMaximum(360);
        sliderCambiarColor.setValue(1);
        sliderCambiarColor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderCambiarColor.setMaximumSize(new java.awt.Dimension(70, 20));
        sliderCambiarColor.setMinimumSize(new java.awt.Dimension(70, 20));
        sliderCambiarColor.setPreferredSize(new java.awt.Dimension(70, 20));
        sliderCambiarColor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderCambiarColorStateChanged(evt);
            }
        });
        sliderCambiarColor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderCambiarColorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderCambiarColorFocusLost(evt);
            }
        });
        jPanel6.add(sliderCambiarColor);

        cambiarColor2.setBackground(new java.awt.Color(255, 255, 255));
        cambiarColor2.setMaximumSize(new java.awt.Dimension(15, 15));
        cambiarColor2.setMinimumSize(new java.awt.Dimension(15, 15));
        cambiarColor2.setPreferredSize(new java.awt.Dimension(15, 15));
        cambiarColor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarColor2ActionPerformed(evt);
            }
        });
        jPanel6.add(cambiarColor2);

        jToolBar1.add(jPanel6);

        jPanel9.add(jToolBar1);

        jPanel7.add(jPanel9, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        menu_archivo.setText("Archivo");

        boton_nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        boton_nuevo.setText("Nuevo");
        boton_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_nuevoActionPerformed(evt);
            }
        });
        menu_archivo.add(boton_nuevo);

        boton_duplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicar.png"))); // NOI18N
        boton_duplicar.setText("Duplicar");
        boton_duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_duplicarActionPerformed(evt);
            }
        });
        menu_archivo.add(boton_duplicar);

        boton_abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        boton_abrir.setText("Abrir");
        boton_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_abrirActionPerformed(evt);
            }
        });
        menu_archivo.add(boton_abrir);

        boton_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        boton_guardar.setText("Guardar");
        boton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_guardarActionPerformed(evt);
            }
        });
        menu_archivo.add(boton_guardar);

        Barra_Menu.add(menu_archivo);

        Imagen.setText("Imagen");

        menuAffineTransformOpActionPerformed.setText("AffineTransformOP");
        menuAffineTransformOpActionPerformed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAffineTransformOpActionPerformedActionPerformed(evt);
            }
        });
        Imagen.add(menuAffineTransformOpActionPerformed);

        menuLookupOP.setText("LookupOP");
        menuLookupOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLookupOPActionPerformed(evt);
            }
        });
        Imagen.add(menuLookupOP);

        menu_rescale.setText("RescaleOP");
        menu_rescale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_rescaleActionPerformed(evt);
            }
        });
        Imagen.add(menu_rescale);

        menu_convolve.setText("ConvolveOP");
        menu_convolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_convolveActionPerformed(evt);
            }
        });
        Imagen.add(menu_convolve);

        BandCombineOp.setText("BandCombineOP");
        BandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandCombineOpActionPerformed(evt);
            }
        });
        Imagen.add(BandCombineOp);

        colorConvertOP.setText("ColorConvertOP");
        colorConvertOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOPActionPerformed(evt);
            }
        });
        Imagen.add(colorConvertOP);

        PosterizarOP.setText("PosterizarOP");
        PosterizarOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PosterizarOPActionPerformed(evt);
            }
        });
        Imagen.add(PosterizarOP);

        Barra_Menu.add(Imagen);

        menu_ayuda.setText("Ayuda");

        boton_acercaDe.setText("Acerca De");
        boton_acercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_acercaDeActionPerformed(evt);
            }
        });
        menu_ayuda.add(boton_acercaDe);

        Barra_Menu.add(menu_ayuda);

        setJMenuBar(Barra_Menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.RECTANGULO);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void BotonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonElipseActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.ELIPSE);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
    }//GEN-LAST:event_BotonElipseActionPerformed

    private void BotonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLineaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.LINEA);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
    }//GEN-LAST:event_BotonLineaActionPerformed

    private void boton_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_nuevoActionPerformed
        // TODO add your handling code here:
//        VentanaInterna vi = new VentanaInterna();
//        escritorio.add(vi);
//        vi.setVisible(true);
//        BufferedImage img;
//        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
//        Graphics2D g2d = img.createGraphics();
//        g2d.setColor(Color.white);
//        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
//
//        vi.getLienzo().setImg(img);
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setCursor(cursor);

        BufferedImage img;

        String width = JOptionPane.showInputDialog(this, "Introduce el ancho de la imagen:");
        String height = JOptionPane.showInputDialog(this, "Introduce el alto de la imagen:");

        int imgWidth = Integer.parseInt(width);
        int imgHeight = Integer.parseInt(height);
        vi.setSize(imgWidth, imgHeight);
        vi.setVisible(true);

        img = new BufferedImage(imgWidth, imgHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.white);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());

        vi.getLienzo().setImg(img);

    }//GEN-LAST:event_boton_nuevoActionPerformed

    private void boton_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_abrirActionPerformed
        // TODO add your handling code here:
//        JFileChooser dlg = new JFileChooser();
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png");
//        dlg.setFileFilter(filter);
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images & WAV & MP3 Sounds", "jpg", "png", "wav", "au");
        dlg.setFileFilter(filter);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };

                String extension = f.getName().substring(f.getName().lastIndexOf(".") + 1);

                if (extension.equalsIgnoreCase("jpg") || extension.equalsIgnoreCase("png")) {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImg(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (extension.equalsIgnoreCase("wav")
                        || extension.equalsIgnoreCase("au")) {
                    listaReproduccion.addItem(f);
                }
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_boton_abrirActionPerformed

    private void boton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_guardarActionPerformed

//        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
//        if (vi != null) {
//            BufferedImage img = vi.getLienzo().getPaintedImage();
//            if (img != null) {
//                JFileChooser dlg = new JFileChooser();
//                int resp = dlg.showSaveDialog(this);
//                if (resp == JFileChooser.APPROVE_OPTION) {
//                    try {
//                        File f = dlg.getSelectedFile();
//                        ImageIO.write(img, "jpg", f);
//                        vi.setTitle(f.getName());
//                    } catch (Exception ex) {
//                        System.err.println("Error al guardar la imagen");
//                    }
//                }
//            }
//        }
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png");
                dlg.setFileFilter(filter);
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        String extension = "";
                        String fileName = f.getName();
                        int i = fileName.lastIndexOf('.');
                        if (i > 0) {
                            extension = fileName.substring(i + 1);
                        } else {
                            extension = ((FileNameExtensionFilter) dlg.getFileFilter()).getExtensions()[0];
                            f = new File(f.toString() + "." + extension);
                        }
                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_boton_guardarActionPerformed

    private void BotonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMoverActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setEdicion(BotonMover.isSelected());
            cursor = Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);
            lienzo.setCursor(cursor);
        }
    }//GEN-LAST:event_BotonMoverActionPerformed

    private void BotonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAlisarActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setAlisar(BotonAlisar.isSelected());
        }

    }//GEN-LAST:event_BotonAlisarActionPerformed

    private void BotonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonTransparenciaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTransparencia(BotonTransparencia.isSelected());
        }
    }//GEN-LAST:event_BotonTransparenciaActionPerformed

    private void BotonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRellenoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setRelleno(BotonRelleno.isSelected());
        }
    }//GEN-LAST:event_BotonRellenoActionPerformed

    private void GrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GrosorStateChanged
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTrazo((Integer) Grosor.getValue());
        }

    }//GEN-LAST:event_GrosorStateChanged

    private void SeleccionColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionColorActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setColor(color);
        }
        SeleccionColor.setBackground(color);
    }//GEN-LAST:event_SeleccionColorActionPerformed

    private void BotonFantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonFantasmaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.FANTASMA);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }

    }//GEN-LAST:event_BotonFantasmaActionPerformed

    private void menu_rescaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_rescaleActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menu_rescaleActionPerformed

    private void menu_convolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_convolveActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menu_convolveActionPerformed

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_brilloFocusGained

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void contrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_contrasteFocusGained

    private void contrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.contraste.setValue(0);

    }//GEN-LAST:event_contrasteFocusLost

    private void cometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cometaFocusGained
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_cometaFocusGained

    private void cometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cometaFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.cometa.setValue(0);
    }//GEN-LAST:event_cometaFocusLost

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    int brillo = this.brillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, brillo, null);
                    rop.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void contrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    int contraste = this.contraste.getValue();
                    RescaleOp rop = new RescaleOp(contraste, 0F, null);
                    rop.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteStateChanged

    private void cometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cometaStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    // Obtener el valor del deslizador para determinar el tamaño del kernel
                    int size = cometa.getValue();
                    System.out.println("Tam mascara: " + size);

                    float[] kernel = new float[size];
                    float sum = 0;
                    int center = size / 2;
                    for (int i = center; i < size; i++) {
                        // float value = center - Math.abs(center - i);
                        kernel[i] = size - i;
                        sum += kernel[i];
                    }

                    // Normalizamos para que la suma = 1
                    for (int i = 0; i < size; i++) {
                        kernel[i] /= sum;
                    }

                    // Creamos el kernel
                    Kernel k = new Kernel(size, 1, kernel);

                    // Aplicamos
                    ConvolveOp cop = new ConvolveOp(k);
                    cop.filter(imgFuente, img);

                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_cometaStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    String filtro = (String) jComboBox1.getSelectedItem();
                    System.out.println(filtro);
                    Kernel kernel = null;
                    switch (filtro) {
                        case "Emborronamiento media":
                            kernel = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case "Emborronamiento binomial":
                            kernel = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case "Enfoque":
                            kernel = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break;
                        case "Relieve":
                            kernel = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case "Detector de fronteras laplaciano":
                            kernel = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                        case "Emborronamiento iluminado": // Reto 2
                            float iluminado[] = {2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f, 2f / 9f};
                            kernel = new Kernel(3, 3, iluminado);
                            /*El 2 multiplica x 2 el brillo los pixeles vecinos, si fuese 1f/9f sería sólo la media (desarrollar mas)*/
                            break;
                        case "Emborronamiento iluminado 5x5":
                            float iluminado_cinco_x_cinco[] = new float[25];
                            for (int i = 0; i < 25; i++) {
                                iluminado_cinco_x_cinco[i] = 2f / 25f;
                            }
                            kernel = new Kernel(5, 5, iluminado_cinco_x_cinco);
                            break;
                            
                        case "Emborronamiento 5x5":
                            float cinco_x_cinco[] = new float[25];
                            for (int i = 0; i < 25; i++) {
                                cinco_x_cinco[i] = 1f / 25f;
                            }
                            kernel = new Kernel(5, 5, cinco_x_cinco);
                            break;
                        case "Emborronamiento 7x7":
                            float siete_x_siete[] = new float[49];
                            for (int i = 0; i < 49; i++) {
                                siete_x_siete[i] = 1f / 49f;
                            }
                            kernel = new Kernel(7, 7, siete_x_siete);
                    }
                    ConvolveOp cop = new ConvolveOp(kernel);
                    BufferedImage imgDest = cop.filter(img, null);
                    vi.getLienzo().setImg(imgDest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void botonVolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolcadoActionPerformed
        // TODO add your handling code here:
//        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
//        if (vi != null) {
//            Lienzo2D lienzo = vi.getLienzo();
//            BufferedImage img = lienzo.getImg();
//            if (img != null) {
//                lienzo.setImg(img);
//                lienzo.repaint();
//                lienzo.borrar();
//            }
//        }
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            Lienzo2D lienzo = vi.getLienzo();
            lienzo.volcado();
        }
    }//GEN-LAST:event_botonVolcadoActionPerformed

    private void menuAffineTransformOpActionPerformedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAffineTransformOpActionPerformedActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuAffineTransformOpActionPerformedActionPerformed

    private void menuLookupOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLookupOPActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x); // Negativo
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);

                    //BufferedImage imgdest = lop.filter(img, img); // Pasar la misma imagen fuente como imagen destino
                    //  Para abordar este problema, podríamos optar por convertir la imagen fuente a tipo TYPE_INT_ARGB para asegurar compatibilidad3 o pasar en la llamada a filter una imagen destino compatible con la fuente
                    img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuLookupOPActionPerformed

    private void BandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandCombineOpActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_BandCombineOpActionPerformed

    private void colorConvertOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOPActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOPActionPerformed

    private void combinarBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinarBandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }


    }//GEN-LAST:event_combinarBandasActionPerformed

    private void showBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                    BufferedImage imgbanda1 = getImageBand(img, i);
                    vi = new VentanaInterna();
                    vi.getLienzo().setImg(imgbanda1);
                    escritorio.add(vi);
                    vi.setVisible(true);
                }

            }
        }

    }//GEN-LAST:event_showBandasActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                ColorSpace cs = null;
                String seleccion = (String) jComboBox2.getSelectedItem();
                System.out.println(seleccion);
                switch (seleccion) {
                    case "RGB":
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        break;
                    case "YCC":
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        break;
                    case "GREY":
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                        break;
                }
                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgDest = op.filter(img, null);
                    vi = new VentanaInterna();
                    vi.getLienzo().setImg(imgDest);
                    //vi.getLienzo().repaint();
                    escritorio.add(vi);
                    vi.setVisible(true);

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    // Hacemos que el color sea el seleccionado
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sepiaActionPerformed

    private void ecualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    // Hacemos que el color sea el seleccionado
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ecualizarActionPerformed

    private void sliderPosterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizarStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    int N = this.sliderPosterizar.getValue();
                    PosterizarOp op = new PosterizarOp(N);
                    op.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_sliderPosterizarStateChanged

    private void sliderPosterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_sliderPosterizarFocusGained

    private void sliderPosterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.sliderPosterizar.setValue(0);
    }//GEN-LAST:event_sliderPosterizarFocusLost

    private void PosterizarOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PosterizarOPActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    // Hacemos que el color sea el seleccionado
                    PosterizarOp op = new PosterizarOp(5);
                    op.filter(img, img);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_PosterizarOPActionPerformed

    private void potenciarAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potenciarAzulActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    // Hacemos que el color sea el seleccionado
                    BlueOp bOp = new BlueOp(1);
                    bOp.filter(img, img);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_potenciarAzulActionPerformed

    private void sliderRojoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRojoStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    int umbral = this.sliderRojo.getValue();
                    RedOp op = new RedOp(umbral);
                    op.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        // System.out.println(this.sliderRojo.getValue());

    }//GEN-LAST:event_sliderRojoStateChanged

    private void sliderRojoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRojoFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }

    }//GEN-LAST:event_sliderRojoFocusGained

    private void sliderRojoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRojoFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.sliderRojo.setValue(0);

    }//GEN-LAST:event_sliderRojoFocusLost

    private void sliderCambiarColorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderCambiarColorStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    int umbral = this.sliderCambiarColor.getValue();
                    Color c1 = colorC1;
                    Color c2 = colorC2;
                    CambiarColorOp COop = new CambiarColorOp(c1, c2, umbral);
                    COop.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderCambiarColorStateChanged

    private void sliderCambiarColorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCambiarColorFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_sliderCambiarColorFocusGained

    private void sliderCambiarColorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCambiarColorFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.sliderCambiarColor.setValue(0);
    }//GEN-LAST:event_sliderCambiarColorFocusLost

    private void cambiarColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarColor1ActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        this.setColorC1(color);
        cambiarColor1.setBackground(color);
    }//GEN-LAST:event_cambiarColor1ActionPerformed

    private void cambiarColor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarColor2ActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        this.setColorC2(color);
        cambiarColor2.setBackground(color);
    }//GEN-LAST:event_cambiarColor2ActionPerformed

    private void oscurecerClarosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerClarosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        int umbral = 128;
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    //Dividimos el for en un umbral
//                    for (int x = 0; x < 256; x++) {
//                        funcionT[x] = (byte) (255 - x); // Negativo
//                    }
                    for (int x = 0; x < umbral; x++) {
                        funcionT[x] = (byte) x;
                    }
                    for (int x = umbral; x < 256; x++) {
                        //funcionT[x] = (byte) (0.75 * x + 32
                        // funcionT[x] = (byte) (x*0.9);
                        //(x-umbral) es la distancia desde el umbral hasta el valor del pixel actual
                        //255-umbral es la distancia desde el umbral hasta el valor máximo
                        double factor = (x - umbral) / (256.0 - umbral);
                        funcionT[x] = (byte) (x - (x - umbral) * factor);
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);

                    //BufferedImage imgdest = lop.filter(img, img); // Pasar la misma imagen fuente como imagen destino
                    //  Para abordar este problema, podríamos optar por convertir la imagen fuente a tipo TYPE_INT_ARGB para asegurar compatibilidad3 o pasar en la llamada a filter una imagen destino compatible con la fuente
                    img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_oscurecerClarosActionPerformed

    private void transformacionLinealStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transformacionLinealStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        int umbral = 128;
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int a = transformacionLineal.getValue();
                    byte funcionT[] = new byte[256];
                    //Dividimos el for en un umbral
//                    for (int x = 0; x < 256; x++) {
//                        funcionT[x] = (byte) (255 - x); // Negativo
//                    }
                    for (int x = 0; x < umbral; x++) {
                        funcionT[x] = (byte) (x * a / 128);
                    }
                    for (int x = umbral; x < 256; x++) {
                        funcionT[x] = (byte) ((255 - a) * (x - 128) / 127 + a);
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);

                    //BufferedImage imgdest = lop.filter(img, img); // Pasar la misma imagen fuente como imagen destino
                    //  Para abordar este problema, podríamos optar por convertir la imagen fuente a tipo TYPE_INT_ARGB para asegurar compatibilidad3 o pasar en la llamada a filter una imagen destino compatible con la fuente
                    lop.filter(imgFuente, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_transformacionLinealStateChanged

    private void transformacionLinealFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transformacionLinealFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }

    }//GEN-LAST:event_transformacionLinealFocusGained

    private void transformacionLinealFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transformacionLinealFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.transformacionLineal.setValue(0);
    }//GEN-LAST:event_transformacionLinealFocusLost

    private void sliderTintadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTintadoStateChanged
        // TODO add your handling code here:

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null && imgFuente != null) {
                try {
                    float alfa = sliderTintado.getValue() / 10.0f;
                    System.out.println(alfa);
                    // Hacemos que el color sea el seleccionado
                    TintOp tintado = new TintOp(vi.getLienzo().getColor(), alfa);
                    tintado.filter(imgFuente, img);
                    vi.getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderTintadoStateChanged

    private void sliderTintadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_sliderTintadoFocusGained

    private void sliderTintadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.sliderTintado.setValue(0);
    }//GEN-LAST:event_sliderTintadoFocusLost

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && imgFuente != null) {

            try {

                double r = Math.toRadians(this.sliderRotacion.getValue());
                Point c = new Point(imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = new BufferedImage(imgFuente.getWidth(), imgFuente.getHeight(), imgFuente.getType());
                atop.filter(imgFuente, imgdest);
                vi.getLienzo().setImg(imgdest);
                vi.getLienzo().repaint();

            } catch (IllegalArgumentException e) {
                System.err.println(e.getLocalizedMessage());
            }

        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                imgFuente = copiarImagen(img);
            }
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void boton_acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_acercaDeActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this,
                "Nombre del programa: Super Paint\nVersión: 1.0\nAutor: Blanca Girón Ricoy",
                "Acerca de",
                JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_boton_acercaDeActionPerformed

    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        // TODO add your handling code here:
        File f = (File) listaReproduccion.getSelectedItem();
        if (f != null) {
            // Si no se está reproduciendo, comenzar la reproducción
            if (player == null) {
                player = new SMClipPlayer(f);
            }
            if (player != null) {
                if (pausado) {
                    player.resume();
                    pausado = false;
                } else {
                    player.play();

                }
            }

        }

//        File f = (File) listaReproduccion.getSelectedItem();
//        if (f != null) {
//            player = new SMClipPlayer(f);
//            if (player != null) {
//                player.play();
//            }
//        }

    }//GEN-LAST:event_botonPlayActionPerformed

    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        // TODO add your handling code here:

        if (player != null) {
            player.stop();
            player = null;
        }
        if (recorder != null) {
            recorder.stop();
            recorder = null;
        }
    }//GEN-LAST:event_botonStopActionPerformed

    private void botonPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPausaActionPerformed
        // TODO add your handling code here:
        if (player != null) {
            player.pause();
            pausado = true;
        }
    }//GEN-LAST:event_botonPausaActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                }
            } catch (Exception e) {
                System.err.println("Error al grabar sonido");
            }
        }
    }//GEN-LAST:event_botonGrabarActionPerformed

    private void listaReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReproduccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaReproduccionActionPerformed

    private void BotonTrazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonTrazoLibreActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.TRAZO_LIBRE);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
    }//GEN-LAST:event_BotonTrazoLibreActionPerformed

    private void botonContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteNormalActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrasteNormalActionPerformed

    private void botonContrasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteOscurecidoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrasteOscurecidoActionPerformed

    private void botonContrasteIluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteIluminadoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_botonContrasteIluminadoActionPerformed

    private void botonEscalarAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalarAumentarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImg();
            if (imgSource != null) {
                double r = Math.toRadians(180);
                Point c = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = new BufferedImage(imgSource.getWidth(), imgSource.getHeight(), imgSource.getType());
                atop.filter(imgSource, imgdest);
                vi.getLienzo().setImg(imgdest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonEscalarAumentarActionPerformed

    private void botonEscalarDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalarDisminuirActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImg();
            if (imgSource != null) {
                double r = Math.toRadians(180);
                Point c = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = new BufferedImage(imgSource.getWidth(), imgSource.getHeight(), imgSource.getType());
                atop.filter(imgSource, imgdest);
                vi.getLienzo().setImg(imgdest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonEscalarDisminuirActionPerformed

    private void botonRotacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacionActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImg();
            if (imgSource != null) {
                double r = Math.toRadians(180);
                Point c = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = new BufferedImage(imgSource.getWidth(), imgSource.getHeight(), imgSource.getType());
                atop.filter(imgSource, imgdest);
                vi.getLienzo().setImg(imgdest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonRotacionActionPerformed

    private void boton_duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_duplicarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna vi_nueva = new VentanaInterna();
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                // Utiliza la función copiarImagen para crear una copia de la imagen
                BufferedImage copiaImg = copiarImagen(img);
                vi_nueva.getLienzo().setImg(copiaImg);
                this.escritorio.add(vi_nueva);
                vi_nueva.setVisible(true);
            }
        }

    }//GEN-LAST:event_boton_duplicarActionPerformed

    private void botonTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTextoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.TEXTO);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }

    }//GEN-LAST:event_botonTextoActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_NEGATIVE;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void BotonArcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonArcoActionPerformed
        // TODO add your handling code here
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.ARCO);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }

    }//GEN-LAST:event_BotonArcoActionPerformed

    private void BotonCubicCurveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCubicCurveActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.CUBIC_CURVE);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
    }//GEN-LAST:event_BotonCubicCurveActionPerformed

    private void BotonPentagonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPentagonoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Figuras.PENTAGONO);
            cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
            lienzo.setCursor(cursor);
            lienzo.setEdicion(BotonMover.isSelected());
        }
        
    }//GEN-LAST:event_BotonPentagonoActionPerformed

    public void setColorC1(Color colorC1) {
        this.colorC1 = colorC1;
    }

    public void setColorC2(Color colorC2) {
        this.colorC2 = colorC2;
    }
//
//    class ManejadorAudio implements LineListener {
//
//        @Override
//        public void update(LineEvent event) {
//            if (event.getType() == LineEvent.Type.START) {
//                botonPlay.setEnabled(false);
//            }
//            if (event.getType() == LineEvent.Type.STOP) {
//                botonPlay.setEnabled(true);
//            }
//            if (event.getType() == LineEvent.Type.CLOSE) {
//            }
//        }
//    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana_principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BandCombineOp;
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JMenuBar Barra_Menu;
    private javax.swing.JToolBar Barra_herramientas;
    private javax.swing.JToggleButton BotonAlisar;
    private javax.swing.JToggleButton BotonArco;
    private javax.swing.JToggleButton BotonCubicCurve;
    private javax.swing.JToggleButton BotonElipse;
    private javax.swing.JToggleButton BotonFantasma;
    private javax.swing.JToggleButton BotonLinea;
    private javax.swing.JToggleButton BotonMover;
    private javax.swing.JToggleButton BotonPentagono;
    private javax.swing.JToggleButton BotonRelleno;
    private javax.swing.JToggleButton BotonTransparencia;
    private javax.swing.JToggleButton BotonTrazoLibre;
    private javax.swing.JSlider Grosor;
    private javax.swing.JMenu Imagen;
    private javax.swing.JPanel Panel_Barra_Estado;
    private javax.swing.JMenuItem PosterizarOP;
    private javax.swing.JButton SeleccionColor;
    private javax.swing.JButton botonContrasteIluminado;
    private javax.swing.JButton botonContrasteNormal;
    private javax.swing.JButton botonContrasteOscurecido;
    private javax.swing.JButton botonEscalarAumentar;
    private javax.swing.JButton botonEscalarDisminuir;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonPausa;
    private javax.swing.JButton botonPlay;
    private javax.swing.JButton botonRotacion;
    private javax.swing.JButton botonStop;
    private javax.swing.JToggleButton botonTexto;
    private javax.swing.JToggleButton botonVolcado;
    private javax.swing.JMenuItem boton_abrir;
    private javax.swing.JMenuItem boton_acercaDe;
    private javax.swing.JMenuItem boton_duplicar;
    private javax.swing.JMenuItem boton_guardar;
    private javax.swing.JMenuItem boton_nuevo;
    private javax.swing.JSlider brillo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cambiarColor1;
    private javax.swing.JButton cambiarColor2;
    private javax.swing.JMenuItem colorConvertOP;
    private javax.swing.JToggleButton combinarBandas;
    private javax.swing.JSlider cometa;
    private javax.swing.JSlider contraste;
    private javax.swing.JButton ecualizar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel etiqueta1;
    private javax.swing.JLabel etiqueta2;
    private javax.swing.JLabel etiqueta3;
    private javax.swing.JLabel etiqueta4;
    private javax.swing.JLabel etiqueta5;
    private javax.swing.JLabel etiqueta6;
    private javax.swing.JLabel etiqueta7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JMenuItem menuAffineTransformOpActionPerformed;
    private javax.swing.JMenuItem menuLookupOP;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_ayuda;
    private javax.swing.JMenuItem menu_convolve;
    private javax.swing.JMenuItem menu_rescale;
    private javax.swing.JToggleButton oscurecerClaros;
    private javax.swing.JButton potenciarAzul;
    private javax.swing.JButton sepia;
    private javax.swing.JToggleButton showBandas;
    private javax.swing.JSlider sliderCambiarColor;
    private javax.swing.JSlider sliderPosterizar;
    private javax.swing.JSlider sliderRojo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTintado;
    private javax.swing.JSlider transformacionLineal;
    // End of variables declaration//GEN-END:variables
}
